# Java 代码规范


## 一般规范

#### 命名

* 严禁使用拼音，英文单词选用首先要求贴合功能、其次尽量简短

``` 

推荐：Stock.java/Inventory.java／String count
反例：KuCun.java/String jishu


```

* 类名使用 UpperCamelCase 风格，必须遵从驼峰形式

```java

StoreVipConsumeItems.java;


```

* 方法名、参数名、成员变量、局部变量都统一使用 lowerCamelCase 风格，必须遵从 驼峰形式。

```

public static String inventoryItemList;

public void updateWarehouseName (String name) {
	String midName;
	
	...
	
}


```

* 常量命名全部大写，单词间用下划线隔开，力求语义表达完整清楚，不要嫌名字长。 

```

正例: MAX_STOCK_COUNT

反例: MAX_COUNT/maxCount


```

* 尽量避免使用缩写，采用简短单词提高代码可阅读性

```

推荐：
	ProductCostCount

反例：
	ProductCostCount  pdtCostCount
	condition condi


```

#### 书写格式

* 类成员顺序

```

  level 1 : 静态成员 > 实例成员 > 静态方法 > 实例方法 > 枚举 > 内部类
  	 
  level 2 : public > protected > private 
  
  变量和方法之间保留一个空行，同时连续书写的方法之间保留单个空行
  
  public class User{
  
      public static group;
      private String name;
      private int age;
      保留空行
      public static User getUser() {
          return new User();
      }
      空行
      public String getName() {
          return name;
      }
      空行
      public int getAge() {
          return age;
      }
      
  }
  
```  


* 类体首末行保留空行，同时代码中不允许有无效引用和多余的空行（特殊分割部分除外）

```
import java.util.List; (无效引用，应予剔除)

public class Test {

	public void practice() {
	
		System.out.println("this is my test");
		
		多余空行 应予剔除
	}

}


```

* 体内代码缩进 4 个空格，类体首行末行保留为空行

```

public class User {
	
	private String name;
	
	public void test() {
	
		for(){
			String name;
			if(name==mull) {
				int a = 12;
			}
			...
		}
	}
	
}


```

* 空格的使用

```

if/for/while/switch/do 等保留字与括号之间都必须加空格。

缩进采用 4 个空格，禁止使用 tab 字符。

任何二目、三目运算符的左右两边都需要加一个空格。

左大括号与其左侧内容留一个空格

public static void main(String[] args) {
     
     String say = "hello";
     int flag = 0;
     if (flag == 0) {
     
         System.out.println(say);
     
     }

	 if (flag == 1) {
         System.out.println("world");
	 // 右大括号前换行，右大括号后有 else，不用换行 
	 } else {
	     System.out.println("ok");
	 	 // 在右大括号后直接结束，则必须换行
	 } 
} 



```

* 换行

```
	单行字符数限制不超过 120 个，超出需要换行，换行时遵循如下原则:
1) 第二行相对第一行缩进 4 个空格，从第三行开始，不再继续缩进，参考示例。
2) 运算符与下文一起换行。
3) 方法调用的点符号与下文一起换行。 
4) 在多个参数超长，在逗号后换行。
5) 在括号前不要换行，见反例。

正例:
	StringBuffer sb = new StringBuffer();
	//超过 120 个字符的情况下，换行缩进 4 个空格，并且方法前的点符号一起换行 
	sb.append("zi").append("xin")...
        .append("huang")...
        .append("huang")...
        .append("huang");
反例:
	StringBuffer sb = new StringBuffer();
	//超过 120 个字符的情况下，不要在括号前换行 	sb.append("zi").append("xin")...append
	("huang");
	//参数很多的方法调用可能超过 120 个字符，不要在逗号前换行 method(args1, 	args2, args3, ...
	, argsX);



```



* 等号的使用

```

== 号与两侧内容不留空格
	if(name == null){
	
	}

= 赋值时与两侧内容保留一个空格
	String category = "color";


```

* 方法参数列表

```

数据类型 和 形参保留单个空格，多个参数之间保留一个空格

public void login(String name,String password) {

	...	

}


```

* 条件控制语句/异常捕获

```

public void test() {
    
    if(...) {
    
        ....
    
    }else if(...) {
    
   	     ....
    
    }else{
    
        ....
    
    }
    
    
    try {
    
        ...
        
    }catch(...) {
    
    	...	
    
    }
    
    if (user == null && a > 12) {
        throw new SystemUserException(UserResponseStatus.systemUserNotExist,"systemUserNotExist");
    }



}


```




##业务代码规范

* package的结构

```

 全局项目名 + 模块名 + [ bean | controller | service | dto | mapper ] 的形式。
 
 com.petkit.user.systemuser.controller
 com.petkit.user.systemuser.service
 com.petkit.user.systemuser.mapper
 com.petkit.user.systemuser.dto
 
```


* 类的实例成员必须封装，对外提供访问入口

```java
	
	private String id;
	
	public String  getId() {
		return id;
	}
	
	private String id 
	
	public String  setId(String id) {
		this.id = id;
	}
	

```

* 抽象类命名使用 Abstract 或 Base 开头，异常类命名使用 Exception 结尾，测试类命名以它要测试的类的名称开始，以 Test 结尾。

```

public class AbstractOperationStrategy {}
public class BaseStrategy {}

public class InventoryNotEnoughException {
	...
}

public class UserTest{
	...
}


```

* 方法命名

```

1) 获取单个对象的方法用get做前缀。 
2) 获取多个对象的方法用list做前缀。
3) 获取统计值的方法用count做前缀。
4) 插入的方法用save(推荐)或insert做前缀。 
5) 删除的方法用remove(推荐)或delete做前缀。 
6) 修改的方法用update做前缀。


```

* 基本数据类型包装类比较 使用  equals 

```

Integer a = 12;
new Integer(12).equals(a)


```


* 注释

```

工具类、关键业务代码建议添加注释，简短语言描述功能、用途


```

